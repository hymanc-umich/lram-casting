   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"ssi.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	ssi_buffer,4,4
  18              		.comm	ssi_counter,1,1
  19              		.comm	ssi_state,1,1
  20              		.comm	ssi_data_ready_flag,1,1
  21              		.comm	ext_buffer_flag,1,1
  22              		.comm	ext_buffer,4,4
  23              		.align	2
  24              		.global	ssi_initialize
  25              		.thumb
  26              		.thumb_func
  28              	ssi_initialize:
  29              	.LFB0:
  30              		.file 1 "../ssi.c"
   1:../ssi.c      **** /*
   2:../ssi.c      ****  * ssi.c
   3:../ssi.c      ****  *
   4:../ssi.c      ****  *  Created on: May 1, 2013
   5:../ssi.c      ****  *      Author: cody
   6:../ssi.c      ****  */
   7:../ssi.c      **** 
   8:../ssi.c      **** 
   9:../ssi.c      **** #include "ssi.h"
  10:../ssi.c      **** 
  11:../ssi.c      **** volatile u32 ssi_buffer;
  12:../ssi.c      **** volatile u8 ssi_counter;
  13:../ssi.c      **** volatile u8 ssi_state;
  14:../ssi.c      **** volatile bool ssi_data_ready_flag;
  15:../ssi.c      **** volatile bool ext_buffer_flag;
  16:../ssi.c      **** volatile encoder_value_t * ext_buffer;
  17:../ssi.c      **** 
  18:../ssi.c      **** // TODO: User set clock frequency
  19:../ssi.c      **** /**
  20:../ssi.c      ****  * @brief Initializes the AEAT9000 SSI Link
  21:../ssi.c      ****  * @param u16 clk_speed SSI Clock Speed in 100bps LSB units
  22:../ssi.c      ****  */
  23:../ssi.c      **** void ssi_initialize(u16 clk_speed)
  24:../ssi.c      **** {
  31              		.loc 1 24 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 14, -4
  39              		.cfi_offset 7, -8
  40 0002 82B0     		sub	sp, sp, #8
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 16
  43 0004 00AF     		add	r7, sp, #0
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0006 0346     		mov	r3, r0
  47 0008 FB80     		strh	r3, [r7, #6]	@ movhi
  25:../ssi.c      **** 	rcc_peripheral_enable_clock(&RCC_APB1ENR, RCC_APB1ENR_TIM2EN); // Initialize timer clk
  48              		.loc 1 25 0
  49 000a 41F21C00 		movw	r0, #4124
  50 000e C4F20200 		movt	r0, 16386
  51 0012 4FF00101 		mov	r1, #1
  52 0016 FFF7FEFF 		bl	rcc_peripheral_enable_clock
  26:../ssi.c      **** 	// Initialize I/O Pins
  27:../ssi.c      **** 	gpio_set_mode(SSI_GPIO, GPIO_MODE_OUTPUT_10_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, SSI_CLK_PIN);
  53              		.loc 1 27 0
  54 001a 4FF40060 		mov	r0, #2048
  55 001e C4F20100 		movt	r0, 16385
  56 0022 4FF00101 		mov	r1, #1
  57 0026 4FF00002 		mov	r2, #0
  58 002a 4FF48073 		mov	r3, #256
  59 002e FFF7FEFF 		bl	gpio_set_mode
  28:../ssi.c      **** 	gpio_set_mode(SSI_GPIO, GPIO_MODE_INPUT, GPIO_CNF_INPUT_PULL_UPDOWN, SSI_DATA_PIN);
  60              		.loc 1 28 0
  61 0032 4FF40060 		mov	r0, #2048
  62 0036 C4F20100 		movt	r0, 16385
  63 003a 4FF00001 		mov	r1, #0
  64 003e 4FF00202 		mov	r2, #2
  65 0042 4FF48063 		mov	r3, #1024
  66 0046 FFF7FEFF 		bl	gpio_set_mode
  29:../ssi.c      **** 	gpio_set_mode(SSI_GPIO, GPIO_MODE_OUTPUT_10_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, SSI_NCS_PIN);
  67              		.loc 1 29 0
  68 004a 4FF40060 		mov	r0, #2048
  69 004e C4F20100 		movt	r0, 16385
  70 0052 4FF00101 		mov	r1, #1
  71 0056 4FF00002 		mov	r2, #0
  72 005a 4FF40073 		mov	r3, #512
  73 005e FFF7FEFF 		bl	gpio_set_mode
  30:../ssi.c      **** 	// Initialize clock timer on TIM1
  31:../ssi.c      **** 	TIM_DIER(SSI_TIMER) = TIM_DIER_UIE;
  74              		.loc 1 31 0
  75 0062 4FF00C03 		mov	r3, #12
  76 0066 C4F20003 		movt	r3, 16384
  77 006a 4FF00102 		mov	r2, #1
  78 006e 1A60     		str	r2, [r3, #0]
  32:../ssi.c      **** 	TIM_PSC(SSI_TIMER) = 1; // 24MHz Clock
  79              		.loc 1 32 0
  80 0070 4FF02803 		mov	r3, #40
  81 0074 C4F20003 		movt	r3, 16384
  82 0078 4FF00102 		mov	r2, #1
  83 007c 1A60     		str	r2, [r3, #0]
  33:../ssi.c      **** 	TIM_ARR(SSI_TIMER) = TIMER_MAX; // Update at 500kHz
  84              		.loc 1 33 0
  85 007e 4FF02C03 		mov	r3, #44
  86 0082 C4F20003 		movt	r3, 16384
  87 0086 4FF01702 		mov	r2, #23
  88 008a 1A60     		str	r2, [r3, #0]
  34:../ssi.c      **** 	// Initialize NVIC
  35:../ssi.c      **** 	nvic_enable_irq(NVIC_TIM2_IRQ);
  89              		.loc 1 35 0
  90 008c 4FF01C00 		mov	r0, #28
  91 0090 FFF7FEFF 		bl	nvic_enable_irq
  36:../ssi.c      **** 	nvic_set_priority(NVIC_TIM2_IRQ, 1);
  92              		.loc 1 36 0
  93 0094 4FF01C00 		mov	r0, #28
  94 0098 4FF00101 		mov	r1, #1
  95 009c FFF7FEFF 		bl	nvic_set_priority
  37:../ssi.c      **** 	ssi_state = SSI_IDLE;
  96              		.loc 1 37 0
  97 00a0 40F20003 		movw	r3, #:lower16:ssi_state
  98 00a4 C0F20003 		movt	r3, #:upper16:ssi_state
  99 00a8 4FF00002 		mov	r2, #0
 100 00ac 1A70     		strb	r2, [r3, #0]
  38:../ssi.c      **** 	ssi_data_ready_flag = false;
 101              		.loc 1 38 0
 102 00ae 40F20003 		movw	r3, #:lower16:ssi_data_ready_flag
 103 00b2 C0F20003 		movt	r3, #:upper16:ssi_data_ready_flag
 104 00b6 4FF00002 		mov	r2, #0
 105 00ba 1A70     		strb	r2, [r3, #0]
  39:../ssi.c      **** }
 106              		.loc 1 39 0
 107 00bc 07F10807 		add	r7, r7, #8
 108 00c0 BD46     		mov	sp, r7
 109 00c2 80BD     		pop	{r7, pc}
 110              		.cfi_endproc
 111              	.LFE0:
 113              		.align	2
 114              		.global	ssi_start_read
 115              		.thumb
 116              		.thumb_func
 118              	ssi_start_read:
 119              	.LFB1:
  40:../ssi.c      **** 
  41:../ssi.c      **** /**
  42:../ssi.c      ****  * @brief Trigger function to start a 2 wire SSI read of arbitrary length
  43:../ssi.c      ****  * @param u7 nbits The number of bits to read
  44:../ssi.c      ****  */
  45:../ssi.c      **** void ssi_start_read(u8 nbits)
  46:../ssi.c      **** {
 120              		.loc 1 46 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 8
 123              		@ frame_needed = 1, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125 00c4 80B4     		push	{r7}
 126              	.LCFI3:
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 7, -4
 129 00c6 83B0     		sub	sp, sp, #12
 130              	.LCFI4:
 131              		.cfi_def_cfa_offset 16
 132 00c8 00AF     		add	r7, sp, #0
 133              	.LCFI5:
 134              		.cfi_def_cfa_register 7
 135 00ca 0346     		mov	r3, r0
 136 00cc FB71     		strb	r3, [r7, #7]
  47:../ssi.c      **** 	if(ext_buffer_flag == true)
 137              		.loc 1 47 0
 138 00ce 40F20003 		movw	r3, #:lower16:ext_buffer_flag
 139 00d2 C0F20003 		movt	r3, #:upper16:ext_buffer_flag
 140 00d6 1B78     		ldrb	r3, [r3, #0]
 141 00d8 DBB2     		uxtb	r3, r3
 142 00da 002B     		cmp	r3, #0
 143 00dc 07D0     		beq	.L3
  48:../ssi.c      **** 	{
  49:../ssi.c      **** 		ext_buffer->ready_flag = 0;
 144              		.loc 1 49 0
 145 00de 40F20003 		movw	r3, #:lower16:ext_buffer
 146 00e2 C0F20003 		movt	r3, #:upper16:ext_buffer
 147 00e6 1B68     		ldr	r3, [r3, #0]
 148 00e8 4FF00002 		mov	r2, #0
 149 00ec 1A71     		strb	r2, [r3, #4]
 150              	.L3:
  50:../ssi.c      **** 	}
  51:../ssi.c      **** 	ssi_counter = nbits;
 151              		.loc 1 51 0
 152 00ee 40F20003 		movw	r3, #:lower16:ssi_counter
 153 00f2 C0F20003 		movt	r3, #:upper16:ssi_counter
 154 00f6 FA79     		ldrb	r2, [r7, #7]
 155 00f8 1A70     		strb	r2, [r3, #0]
  52:../ssi.c      **** 	ssi_state = SSI_START;
 156              		.loc 1 52 0
 157 00fa 40F20003 		movw	r3, #:lower16:ssi_state
 158 00fe C0F20003 		movt	r3, #:upper16:ssi_state
 159 0102 4FF00102 		mov	r2, #1
 160 0106 1A70     		strb	r2, [r3, #0]
  53:../ssi.c      **** 	TIM_CNT(SSI_TIMER) = 0;
 161              		.loc 1 53 0
 162 0108 4FF02403 		mov	r3, #36
 163 010c C4F20003 		movt	r3, 16384
 164 0110 4FF00002 		mov	r2, #0
 165 0114 1A60     		str	r2, [r3, #0]
  54:../ssi.c      **** 	TIM_CR1(SSI_TIMER) |= TIM_CR1_CEN;// Start counter
 166              		.loc 1 54 0
 167 0116 4FF08043 		mov	r3, #1073741824
 168 011a 4FF08042 		mov	r2, #1073741824
 169 011e 1268     		ldr	r2, [r2, #0]
 170 0120 42F00102 		orr	r2, r2, #1
 171 0124 1A60     		str	r2, [r3, #0]
  55:../ssi.c      **** }
 172              		.loc 1 55 0
 173 0126 07F10C07 		add	r7, r7, #12
 174 012a BD46     		mov	sp, r7
 175 012c 80BC     		pop	{r7}
 176 012e 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE1:
 180              		.align	2
 181              		.weak	tim2_isr
 182              		.thumb
 183              		.thumb_func
 185              	tim2_isr:
 186              	.LFB2:
  56:../ssi.c      **** 
  57:../ssi.c      **** /**
  58:../ssi.c      ****  * Timer 2 interrupt service routine
  59:../ssi.c      ****  */
  60:../ssi.c      **** void tim2_isr(void)
  61:../ssi.c      **** {
 187              		.loc 1 61 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 8
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 0130 80B5     		push	{r7, lr}
 192              	.LCFI6:
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 14, -4
 195              		.cfi_offset 7, -8
 196 0132 82B0     		sub	sp, sp, #8
 197              	.LCFI7:
 198              		.cfi_def_cfa_offset 16
 199 0134 00AF     		add	r7, sp, #0
 200              	.LCFI8:
 201              		.cfi_def_cfa_register 7
  62:../ssi.c      **** 	TIM_SR(SSI_TIMER) &= ~TIM_SR_UIF;// Clear Interrupt Flag
 202              		.loc 1 62 0
 203 0136 4FF01003 		mov	r3, #16
 204 013a C4F20003 		movt	r3, 16384
 205 013e 4FF01002 		mov	r2, #16
 206 0142 C4F20002 		movt	r2, 16384
 207 0146 1268     		ldr	r2, [r2, #0]
 208 0148 22F00102 		bic	r2, r2, #1
 209 014c 1A60     		str	r2, [r3, #0]
  63:../ssi.c      **** 	// Check state and run correct handler action
  64:../ssi.c      **** 	switch(ssi_state)
 210              		.loc 1 64 0
 211 014e 40F20003 		movw	r3, #:lower16:ssi_state
 212 0152 C0F20003 		movt	r3, #:upper16:ssi_state
 213 0156 1B78     		ldrb	r3, [r3, #0]
 214 0158 DBB2     		uxtb	r3, r3
 215 015a 032B     		cmp	r3, #3
 216 015c 65D8     		bhi	.L14
 217 015e 01A2     		adr	r2, .L10
 218 0160 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 219              		.align	2
 220              	.L10:
 221 0164 2B020000 		.word	.L14+1
 222 0168 75010000 		.word	.L7+1
 223 016c 95010000 		.word	.L8+1
 224 0170 CD010000 		.word	.L9+1
 225              	.L7:
  65:../ssi.c      **** 	{
  66:../ssi.c      **** 	case(SSI_START): // SSI Start of Frame
  67:../ssi.c      **** 	{
  68:../ssi.c      **** 		gpio_clear(SSI_GPIO, SSI_CLK_PIN);// Set the clock low
 226              		.loc 1 68 0
 227 0174 4FF40060 		mov	r0, #2048
 228 0178 C4F20100 		movt	r0, 16385
 229 017c 4FF48071 		mov	r1, #256
 230 0180 FFF7FEFF 		bl	gpio_clear
  69:../ssi.c      **** 		ssi_state = SSI_CLK_LOW; // Change SSI state
 231              		.loc 1 69 0
 232 0184 40F20003 		movw	r3, #:lower16:ssi_state
 233 0188 C0F20003 		movt	r3, #:upper16:ssi_state
 234 018c 4FF00302 		mov	r2, #3
 235 0190 1A70     		strb	r2, [r3, #0]
  70:../ssi.c      **** 		break;
 236              		.loc 1 70 0
 237 0192 4BE0     		b	.L4
 238              	.L8:
 239              	.LBB2:
  71:../ssi.c      **** 	}
  72:../ssi.c      **** 	case(SSI_CLK_HIGH): // SSI Clock High-to-Low
  73:../ssi.c      **** 	{
  74:../ssi.c      **** 		gpio_clear(SSI_GPIO, SSI_CLK_PIN);// Set clock low
 240              		.loc 1 74 0
 241 0194 4FF40060 		mov	r0, #2048
 242 0198 C4F20100 		movt	r0, 16385
 243 019c 4FF48071 		mov	r1, #256
 244 01a0 FFF7FEFF 		bl	gpio_clear
  75:../ssi.c      **** 		u8 input_bit = GPIO_IDR(SSI_GPIO) & SSI_DATA_PIN;// Read bit on pin 10
 245              		.loc 1 75 0
 246 01a4 40F60803 		movw	r3, #2056
 247 01a8 C4F20103 		movt	r3, 16385
 248 01ac 1B68     		ldr	r3, [r3, #0]
 249 01ae 4FF00003 		mov	r3, #0
 250 01b2 FB71     		strb	r3, [r7, #7]
  76:../ssi.c      **** 		ssi_bit_handler(input_bit); // Call bit handler
 251              		.loc 1 76 0
 252 01b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 253 01b6 1846     		mov	r0, r3
 254 01b8 FFF7FEFF 		bl	ssi_bit_handler
  77:../ssi.c      **** 		ssi_state = SSI_CLK_LOW;
 255              		.loc 1 77 0
 256 01bc 40F20003 		movw	r3, #:lower16:ssi_state
 257 01c0 C0F20003 		movt	r3, #:upper16:ssi_state
 258 01c4 4FF00302 		mov	r2, #3
 259 01c8 1A70     		strb	r2, [r3, #0]
  78:../ssi.c      **** 		break;
 260              		.loc 1 78 0
 261 01ca 2FE0     		b	.L4
 262              	.L9:
 263              	.LBE2:
  79:../ssi.c      **** 	}
  80:../ssi.c      **** 	case(SSI_CLK_LOW): // SSI Clock Low-to-High
  81:../ssi.c      **** 	{
  82:../ssi.c      **** 		// Set clock high
  83:../ssi.c      **** 		gpio_set(SSI_GPIO, SSI_CLK_PIN);
 264              		.loc 1 83 0
 265 01cc 4FF40060 		mov	r0, #2048
 266 01d0 C4F20100 		movt	r0, 16385
 267 01d4 4FF48071 		mov	r1, #256
 268 01d8 FFF7FEFF 		bl	gpio_set
  84:../ssi.c      **** 		if(ssi_counter == 0)
 269              		.loc 1 84 0
 270 01dc 40F20003 		movw	r3, #:lower16:ssi_counter
 271 01e0 C0F20003 		movt	r3, #:upper16:ssi_counter
 272 01e4 1B78     		ldrb	r3, [r3, #0]
 273 01e6 DBB2     		uxtb	r3, r3
 274 01e8 002B     		cmp	r3, #0
 275 01ea 16D1     		bne	.L12
  85:../ssi.c      **** 		{
  86:../ssi.c      **** 			ssi_state = SSI_IDLE;
 276              		.loc 1 86 0
 277 01ec 40F20003 		movw	r3, #:lower16:ssi_state
 278 01f0 C0F20003 		movt	r3, #:upper16:ssi_state
 279 01f4 4FF00002 		mov	r2, #0
 280 01f8 1A70     		strb	r2, [r3, #0]
  87:../ssi.c      **** 			ssi_data_ready_flag = true;
 281              		.loc 1 87 0
 282 01fa 40F20003 		movw	r3, #:lower16:ssi_data_ready_flag
 283 01fe C0F20003 		movt	r3, #:upper16:ssi_data_ready_flag
 284 0202 4FF00102 		mov	r2, #1
 285 0206 1A70     		strb	r2, [r3, #0]
  88:../ssi.c      **** 			TIM_CR1(SSI_TIMER) &= ~TIM_CR1_CEN; // Turn off timer
 286              		.loc 1 88 0
 287 0208 4FF08043 		mov	r3, #1073741824
 288 020c 4FF08042 		mov	r2, #1073741824
 289 0210 1268     		ldr	r2, [r2, #0]
 290 0212 22F00102 		bic	r2, r2, #1
 291 0216 1A60     		str	r2, [r3, #0]
  89:../ssi.c      **** 		}
  90:../ssi.c      **** 		else
  91:../ssi.c      **** 			ssi_state = SSI_CLK_HIGH;
  92:../ssi.c      **** 		break;
 292              		.loc 1 92 0
 293 0218 08E0     		b	.L4
 294              	.L12:
  91:../ssi.c      **** 			ssi_state = SSI_CLK_HIGH;
 295              		.loc 1 91 0
 296 021a 40F20003 		movw	r3, #:lower16:ssi_state
 297 021e C0F20003 		movt	r3, #:upper16:ssi_state
 298 0222 4FF00202 		mov	r2, #2
 299 0226 1A70     		strb	r2, [r3, #0]
 300              		.loc 1 92 0
 301 0228 00E0     		b	.L4
 302              	.L14:
  93:../ssi.c      **** 	}
  94:../ssi.c      **** 	case(SSI_IDLE): // SSI Idle (Not Used)
  95:../ssi.c      **** 			break;
  96:../ssi.c      **** 	default:
  97:../ssi.c      **** 		break;
 303              		.loc 1 97 0
 304 022a 00BF     		nop
 305              	.L4:
  98:../ssi.c      **** 	}
  99:../ssi.c      **** }
 306              		.loc 1 99 0
 307 022c 07F10807 		add	r7, r7, #8
 308 0230 BD46     		mov	sp, r7
 309 0232 80BD     		pop	{r7, pc}
 310              		.cfi_endproc
 311              	.LFE2:
 313              		.align	2
 314              		.global	ssi_bit_handler
 315              		.thumb
 316              		.thumb_func
 318              	ssi_bit_handler:
 319              	.LFB3:
 100:../ssi.c      **** 
 101:../ssi.c      **** void ssi_bit_handler(u8 bit)
 102:../ssi.c      **** {
 320              		.loc 1 102 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 8
 323              		@ frame_needed = 1, uses_anonymous_args = 0
 324              		@ link register save eliminated.
 325 0234 80B4     		push	{r7}
 326              	.LCFI9:
 327              		.cfi_def_cfa_offset 4
 328              		.cfi_offset 7, -4
 329 0236 83B0     		sub	sp, sp, #12
 330              	.LCFI10:
 331              		.cfi_def_cfa_offset 16
 332 0238 00AF     		add	r7, sp, #0
 333              	.LCFI11:
 334              		.cfi_def_cfa_register 7
 335 023a 0346     		mov	r3, r0
 336 023c FB71     		strb	r3, [r7, #7]
 103:../ssi.c      **** 	ssi_counter--; // Decrement bit Counter
 337              		.loc 1 103 0
 338 023e 40F20003 		movw	r3, #:lower16:ssi_counter
 339 0242 C0F20003 		movt	r3, #:upper16:ssi_counter
 340 0246 1B78     		ldrb	r3, [r3, #0]
 341 0248 DBB2     		uxtb	r3, r3
 342 024a 03F1FF33 		add	r3, r3, #-1
 343 024e DAB2     		uxtb	r2, r3
 344 0250 40F20003 		movw	r3, #:lower16:ssi_counter
 345 0254 C0F20003 		movt	r3, #:upper16:ssi_counter
 346 0258 1A70     		strb	r2, [r3, #0]
 104:../ssi.c      **** 	ssi_buffer = ssi_buffer << 1; // Shift buffer
 347              		.loc 1 104 0
 348 025a 40F20003 		movw	r3, #:lower16:ssi_buffer
 349 025e C0F20003 		movt	r3, #:upper16:ssi_buffer
 350 0262 1B68     		ldr	r3, [r3, #0]
 351 0264 4FEA4302 		lsl	r2, r3, #1
 352 0268 40F20003 		movw	r3, #:lower16:ssi_buffer
 353 026c C0F20003 		movt	r3, #:upper16:ssi_buffer
 354 0270 1A60     		str	r2, [r3, #0]
 105:../ssi.c      **** 	if(bit == 1)
 355              		.loc 1 105 0
 356 0272 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 357 0274 012B     		cmp	r3, #1
 358 0276 0BD1     		bne	.L16
 106:../ssi.c      **** 	{
 107:../ssi.c      **** 		ssi_buffer |= 1; // Add 1 to LSB
 359              		.loc 1 107 0
 360 0278 40F20003 		movw	r3, #:lower16:ssi_buffer
 361 027c C0F20003 		movt	r3, #:upper16:ssi_buffer
 362 0280 1B68     		ldr	r3, [r3, #0]
 363 0282 43F00102 		orr	r2, r3, #1
 364 0286 40F20003 		movw	r3, #:lower16:ssi_buffer
 365 028a C0F20003 		movt	r3, #:upper16:ssi_buffer
 366 028e 1A60     		str	r2, [r3, #0]
 367              	.L16:
 108:../ssi.c      **** 	}
 109:../ssi.c      **** 	if((ssi_counter == 0) && (ext_buffer_flag == true))
 368              		.loc 1 109 0
 369 0290 40F20003 		movw	r3, #:lower16:ssi_counter
 370 0294 C0F20003 		movt	r3, #:upper16:ssi_counter
 371 0298 1B78     		ldrb	r3, [r3, #0]
 372 029a DBB2     		uxtb	r3, r3
 373 029c 002B     		cmp	r3, #0
 374 029e 1AD1     		bne	.L17
 375              		.loc 1 109 0 is_stmt 0 discriminator 1
 376 02a0 40F20003 		movw	r3, #:lower16:ext_buffer_flag
 377 02a4 C0F20003 		movt	r3, #:upper16:ext_buffer_flag
 378 02a8 1B78     		ldrb	r3, [r3, #0]
 379 02aa DBB2     		uxtb	r3, r3
 380 02ac 002B     		cmp	r3, #0
 381 02ae 12D0     		beq	.L17
 110:../ssi.c      **** 	{
 111:../ssi.c      **** 		ext_buffer->value = ssi_buffer;
 382              		.loc 1 111 0 is_stmt 1
 383 02b0 40F20003 		movw	r3, #:lower16:ext_buffer
 384 02b4 C0F20003 		movt	r3, #:upper16:ext_buffer
 385 02b8 1A68     		ldr	r2, [r3, #0]
 386 02ba 40F20003 		movw	r3, #:lower16:ssi_buffer
 387 02be C0F20003 		movt	r3, #:upper16:ssi_buffer
 388 02c2 1B68     		ldr	r3, [r3, #0]
 389 02c4 1360     		str	r3, [r2, #0]
 112:../ssi.c      **** 		ext_buffer->ready_flag = true;
 390              		.loc 1 112 0
 391 02c6 40F20003 		movw	r3, #:lower16:ext_buffer
 392 02ca C0F20003 		movt	r3, #:upper16:ext_buffer
 393 02ce 1B68     		ldr	r3, [r3, #0]
 394 02d0 4FF00102 		mov	r2, #1
 395 02d4 1A71     		strb	r2, [r3, #4]
 396              	.L17:
 113:../ssi.c      **** 	}
 114:../ssi.c      **** 	// Set Timer
 115:../ssi.c      **** 	TIM_CNT(SSI_TIMER) = 0;
 397              		.loc 1 115 0
 398 02d6 4FF02403 		mov	r3, #36
 399 02da C4F20003 		movt	r3, 16384
 400 02de 4FF00002 		mov	r2, #0
 401 02e2 1A60     		str	r2, [r3, #0]
 116:../ssi.c      **** 	TIM_CR1(SSI_TIMER) |= TIM_CR1_CEN;
 402              		.loc 1 116 0
 403 02e4 4FF08043 		mov	r3, #1073741824
 404 02e8 4FF08042 		mov	r2, #1073741824
 405 02ec 1268     		ldr	r2, [r2, #0]
 406 02ee 42F00102 		orr	r2, r2, #1
 407 02f2 1A60     		str	r2, [r3, #0]
 117:../ssi.c      **** }
 408              		.loc 1 117 0
 409 02f4 07F10C07 		add	r7, r7, #12
 410 02f8 BD46     		mov	sp, r7
 411 02fa 80BC     		pop	{r7}
 412 02fc 7047     		bx	lr
 413              		.cfi_endproc
 414              	.LFE3:
 416 02fe 00BF     		.align	2
 417              		.global	ssi_data_ready
 418              		.thumb
 419              		.thumb_func
 421              	ssi_data_ready:
 422              	.LFB4:
 118:../ssi.c      **** 
 119:../ssi.c      **** bool ssi_data_ready(void)
 120:../ssi.c      **** {
 423              		.loc 1 120 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 1, uses_anonymous_args = 0
 427              		@ link register save eliminated.
 428 0300 80B4     		push	{r7}
 429              	.LCFI12:
 430              		.cfi_def_cfa_offset 4
 431              		.cfi_offset 7, -4
 432 0302 00AF     		add	r7, sp, #0
 433              	.LCFI13:
 434              		.cfi_def_cfa_register 7
 121:../ssi.c      **** 	return ssi_data_ready_flag;
 435              		.loc 1 121 0
 436 0304 40F20003 		movw	r3, #:lower16:ssi_data_ready_flag
 437 0308 C0F20003 		movt	r3, #:upper16:ssi_data_ready_flag
 438 030c 1B78     		ldrb	r3, [r3, #0]
 439 030e DBB2     		uxtb	r3, r3
 122:../ssi.c      **** }
 440              		.loc 1 122 0
 441 0310 1846     		mov	r0, r3
 442 0312 BD46     		mov	sp, r7
 443 0314 80BC     		pop	{r7}
 444 0316 7047     		bx	lr
 445              		.cfi_endproc
 446              	.LFE4:
 448              		.align	2
 449              		.global	ssi_read_data_buffer
 450              		.thumb
 451              		.thumb_func
 453              	ssi_read_data_buffer:
 454              	.LFB5:
 123:../ssi.c      **** 
 124:../ssi.c      **** u32 ssi_read_data_buffer()
 125:../ssi.c      **** {
 455              		.loc 1 125 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 1, uses_anonymous_args = 0
 459 0318 80B5     		push	{r7, lr}
 460              	.LCFI14:
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 14, -4
 463              		.cfi_offset 7, -8
 464 031a 00AF     		add	r7, sp, #0
 465              	.LCFI15:
 466              		.cfi_def_cfa_register 7
 126:../ssi.c      **** 	if(ssi_data_ready())
 467              		.loc 1 126 0
 468 031c FFF7FEFF 		bl	ssi_data_ready
 469 0320 0346     		mov	r3, r0
 470 0322 002B     		cmp	r3, #0
 471 0324 0CD0     		beq	.L20
 127:../ssi.c      **** 	{
 128:../ssi.c      **** 		ssi_data_ready_flag = false;
 472              		.loc 1 128 0
 473 0326 40F20003 		movw	r3, #:lower16:ssi_data_ready_flag
 474 032a C0F20003 		movt	r3, #:upper16:ssi_data_ready_flag
 475 032e 4FF00002 		mov	r2, #0
 476 0332 1A70     		strb	r2, [r3, #0]
 129:../ssi.c      **** 		return ssi_buffer;
 477              		.loc 1 129 0
 478 0334 40F20003 		movw	r3, #:lower16:ssi_buffer
 479 0338 C0F20003 		movt	r3, #:upper16:ssi_buffer
 480 033c 1B68     		ldr	r3, [r3, #0]
 481 033e 01E0     		b	.L21
 482              	.L20:
 130:../ssi.c      **** 	}
 131:../ssi.c      **** 	else
 132:../ssi.c      **** 		return 0xFFFF;
 483              		.loc 1 132 0
 484 0340 4FF6FF73 		movw	r3, #65535
 485              	.L21:
 133:../ssi.c      **** }
 486              		.loc 1 133 0
 487 0344 1846     		mov	r0, r3
 488 0346 80BD     		pop	{r7, pc}
 489              		.cfi_endproc
 490              	.LFE5:
 492              		.align	2
 493              		.global	ssi_set_ext_buffer
 494              		.thumb
 495              		.thumb_func
 497              	ssi_set_ext_buffer:
 498              	.LFB6:
 134:../ssi.c      **** 
 135:../ssi.c      **** void ssi_set_ext_buffer(encoder_value_t * buf)
 136:../ssi.c      **** {
 499              		.loc 1 136 0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 8
 502              		@ frame_needed = 1, uses_anonymous_args = 0
 503              		@ link register save eliminated.
 504 0348 80B4     		push	{r7}
 505              	.LCFI16:
 506              		.cfi_def_cfa_offset 4
 507              		.cfi_offset 7, -4
 508 034a 83B0     		sub	sp, sp, #12
 509              	.LCFI17:
 510              		.cfi_def_cfa_offset 16
 511 034c 00AF     		add	r7, sp, #0
 512              	.LCFI18:
 513              		.cfi_def_cfa_register 7
 514 034e 7860     		str	r0, [r7, #4]
 137:../ssi.c      **** 	ext_buffer = buf;
 515              		.loc 1 137 0
 516 0350 40F20003 		movw	r3, #:lower16:ext_buffer
 517 0354 C0F20003 		movt	r3, #:upper16:ext_buffer
 518 0358 7A68     		ldr	r2, [r7, #4]
 519 035a 1A60     		str	r2, [r3, #0]
 138:../ssi.c      **** 	ext_buffer_flag = true;
 520              		.loc 1 138 0
 521 035c 40F20003 		movw	r3, #:lower16:ext_buffer_flag
 522 0360 C0F20003 		movt	r3, #:upper16:ext_buffer_flag
 523 0364 4FF00102 		mov	r2, #1
 524 0368 1A70     		strb	r2, [r3, #0]
 139:../ssi.c      **** }
 525              		.loc 1 139 0
 526 036a 07F10C07 		add	r7, r7, #12
 527 036e BD46     		mov	sp, r7
 528 0370 80BC     		pop	{r7}
 529 0372 7047     		bx	lr
 530              		.cfi_endproc
 531              	.LFE6:
 533              	.Letext0:
 534              		.file 2 "/opt/ARM/arm-linaro-eabi-4.6/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/includ
 535              		.file 3 "/opt/libopencm3/arm-none-eabi/include/libopencm3/cm3/common.h"
 536              		.file 4 "../ssi.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ssi.c
                            *COM*:0000000000000004 ssi_buffer
                            *COM*:0000000000000001 ssi_counter
                            *COM*:0000000000000001 ssi_state
                            *COM*:0000000000000001 ssi_data_ready_flag
                            *COM*:0000000000000001 ext_buffer_flag
                            *COM*:0000000000000004 ext_buffer
     /tmp/ccYDyZa1.s:23     .text:0000000000000000 $t
     /tmp/ccYDyZa1.s:28     .text:0000000000000000 ssi_initialize
     /tmp/ccYDyZa1.s:118    .text:00000000000000c4 ssi_start_read
     /tmp/ccYDyZa1.s:185    .text:0000000000000130 tim2_isr
     /tmp/ccYDyZa1.s:221    .text:0000000000000164 $d
     /tmp/ccYDyZa1.s:227    .text:0000000000000174 $t
     /tmp/ccYDyZa1.s:318    .text:0000000000000234 ssi_bit_handler
     /tmp/ccYDyZa1.s:421    .text:0000000000000300 ssi_data_ready
     /tmp/ccYDyZa1.s:453    .text:0000000000000318 ssi_read_data_buffer
     /tmp/ccYDyZa1.s:497    .text:0000000000000348 ssi_set_ext_buffer
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rcc_peripheral_enable_clock
gpio_set_mode
nvic_enable_irq
nvic_set_priority
gpio_clear
gpio_set
